
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

SET search_path TO public;

CREATE TABLE IF NOT EXISTS "books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "books" OWNER TO "postgres";

ALTER TABLE "books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "composers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "composers" OWNER TO "postgres";

ALTER TABLE "composers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "composer_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "genres" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "genres" OWNER TO "postgres";

ALTER TABLE "genres" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "genre_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "selections" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "composer_id" bigint,
    "book_id" bigint,
    "page" "text",
    "notes" "text"
);

ALTER TABLE "selections" OWNER TO "postgres";

ALTER TABLE "selections" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "selections_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "services" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "date" "date" NOT NULL
);

ALTER TABLE "services" OWNER TO "postgres";

ALTER TABLE "services" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "service_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "service_selections" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "service_id" bigint NOT NULL,
    "selection_id" bigint NOT NULL,
    "genre_id" bigint NOT NULL
);

ALTER TABLE "service_selections" OWNER TO "postgres";

ALTER TABLE "service_selections" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "service_selections_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "books"
    ADD CONSTRAINT "books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "books"
    ADD CONSTRAINT "books_title_key" UNIQUE ("title");

ALTER TABLE ONLY "composers"
    ADD CONSTRAINT "composer_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "composers"
    ADD CONSTRAINT "composers_name_key" UNIQUE ("name");

ALTER TABLE ONLY "genres"
    ADD CONSTRAINT "genre_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "genres"
    ADD CONSTRAINT "genres_name_key" UNIQUE ("name");

ALTER TABLE ONLY "selections"
    ADD CONSTRAINT "selections_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "service_selections"
    ADD CONSTRAINT "service_selections_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "services"
    ADD CONSTRAINT "service_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "services"
    ADD CONSTRAINT "services_date_key" UNIQUE ("date");

ALTER TABLE ONLY "selections"
    ADD CONSTRAINT "selections_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "books"("id");

ALTER TABLE ONLY "selections"
    ADD CONSTRAINT "selections_composer_id_fkey" FOREIGN KEY ("composer_id") REFERENCES "composers"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "service_selections"
    ADD CONSTRAINT "service_selections_genre_id_fkey" FOREIGN KEY ("genre_id") REFERENCES "genres"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "service_selections"
    ADD CONSTRAINT "service_selections_selection_id_fkey" FOREIGN KEY ("selection_id") REFERENCES "selections"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "service_selections"
    ADD CONSTRAINT "service_selections_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "services"("id") ON DELETE CASCADE;

GRANT USAGE IN SCHEMA "public" TO "postgres";
GRANT USAGE IN SCHEMA "public" TO "anon";
GRANT USAGE IN SCHEMA "public" TO "authenticated";
GRANT USAGE IN SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "books" TO "anon";
GRANT ALL ON TABLE "books" TO "authenticated";
GRANT ALL ON TABLE "books" TO "service_role";

GRANT ALL ON SEQUENCE "books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "books_id_seq" TO "service_role";

GRANT ALL ON TABLE "composers" TO "anon";
GRANT ALL ON TABLE "composers" TO "authenticated";
GRANT ALL ON TABLE "composers" TO "service_role";

GRANT ALL ON SEQUENCE "composer_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "composer_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "composer_id_seq" TO "service_role";

GRANT ALL ON TABLE "genres" TO "anon";
GRANT ALL ON TABLE "genres" TO "authenticated";
GRANT ALL ON TABLE "genres" TO "service_role";

GRANT ALL ON SEQUENCE "genre_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "genre_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "genre_id_seq" TO "service_role";

GRANT ALL ON TABLE "selections" TO "anon";
GRANT ALL ON TABLE "selections" TO "authenticated";
GRANT ALL ON TABLE "selections" TO "service_role";

GRANT ALL ON SEQUENCE "selections_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "selections_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "selections_id_seq" TO "service_role";

GRANT ALL ON TABLE "services" TO "anon";
GRANT ALL ON TABLE "services" TO "authenticated";
GRANT ALL ON TABLE "services" TO "service_role";

GRANT ALL ON SEQUENCE "service_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "service_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "service_id_seq" TO "service_role";

GRANT ALL ON TABLE "service_selections" TO "anon";
GRANT ALL ON TABLE "service_selections" TO "authenticated";
GRANT ALL ON TABLE "service_selections" TO "service_role";

GRANT ALL ON SEQUENCE "service_selections_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "service_selections_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "service_selections_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;

--
-- Stored procedures and functions
--
 
CREATE OR REPLACE FUNCTION get_selections(filter text)
RETURNS TABLE (id bigint, title text, composer text)
AS $$
BEGIN
    RETURN QUERY SELECT selections.id, selections.title, composers.name
    FROM selections
    INNER JOIN composers ON composers.id = selections.composer_id
    WHERE
        filter = ''
        OR filter is null
        OR selections.title ILIKE CONCAT('%', filter, '%')
        OR composers.name ILIKE CONCAT('%', filter, '%');
END; $$
LANGUAGE 'plpgsql';